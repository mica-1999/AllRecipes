generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  password        String
  firstname       String
  lastname        String
  email           String           @unique
  phone           String?
  role            String           @default("viewer")
  isactive        String           @default("pending")
  lastlogin       DateTime?        @db.Timestamp(6)
  createdat       DateTime         @default(now()) @db.Timestamp(6)
  job             String?
  Address         Address?
  Recipe          Recipe[]
  Session         Session[]
  UserPreferences UserPreferences?

  @@index([email])
  @@index([username])
}

model UserPreferences {
  id          Int         @id @default(autoincrement())
  visualtheme VisualTheme @default(Light)
  language    language    @default(English)
  userid      Int         @unique
  User        User        @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Session {
  id        Int      @id @default(autoincrement())
  createdat DateTime @default(now()) @db.Timestamp(6)
  updatedat DateTime @default(now()) @db.Timestamp(6)
  userid    Int
  User      User     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userid], map: "Session_userId_idx")
}

model Recipe {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String
  instructions        String[]
  Ingredients         Ingredients[]
  cooktime            Int?
  difficulty          difficulty
  image               String
  rating              Float?
  season              String?
  categorytype        String
  cuisinetype         cuisineType
  mealtype            mealType
  dietaryrestrictions dietaryRestrictions[]
  numcalories         Int?
  cookingmethod       cookingMethod?
  occasions           occasion[]
  servings            Int?
  viewcount           Int                   @default(0)
  createdat           DateTime              @default(now()) @db.Timestamp(6)
  updatedat           DateTime              @default(now()) @db.Timestamp(6)
  userid              Int
  User                User                  @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)


  @@index([cuisinetype], map: "Recipe_cuisineType_idx")
  @@index([mealtype], map: "Recipe_mealType_idx")
  @@index([userid], map: "Recipe_userId_idx")
}

model Ingredients {
  id          Int      @id @default(autoincrement())
  ingredient        String
  recipeid    Int
  Recipe      Recipe   @relation(fields: [recipeid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@index([recipeid], map: "Ingredients_recipeId_idx")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String?
  city       String?
  state      String?
  postalcode String?
  country    String?
  userid     Int?    @unique
  User       User?   @relation(fields: [userid], references: [id], onUpdate: NoAction)
}

enum VisualTheme {
  Light
  Dark
  Auto
}

enum language {
  English
  Spanish
  Portuguese
}

enum difficulty {
  Easy
  Medium
  Hard
}

enum cuisineType {
  Italian
  Chinese
  Mexican
  Indian
  Japanese
  Thai
  French
  Greek
  Spanish
  Mediterranean
  American
  Korean
  Vietnamese
  MiddleEastern
  Brazilian
}

enum mealType {
  Breakfast
  Lunch
  Dinner
  Brunch
  Snack
  Dessert
}

enum dietaryRestrictions {
  Vegetarian
  Vegan
  GlutenFree
  DairyFree
  NutFree
  LowCarb
}

enum cookingMethod {
  Baking
  Frying
  Grilling
  Steaming
  Boiling
  Roasting
  // Saut√©ing
  SlowCooking
}

enum occasion {
  Birthday
  Holiday
  Casual
  DateNight
  Thanksgiving
  Christmas
  Wedding
  BBQ
  GameDay
  Picnic
  Brunch
  Potluck
}
